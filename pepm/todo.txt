
  You need not describe all algorithms in section 4 because the main point here
  is that these algorithms have quantum oracles as their subcircuits that can be
  considered classical. How about selecting some of them? For example,
  Deutsch-Jozsa, Grover's algorithm, and Shor's algorithm. If you think it is
  essential to illustrate obtained ANF equations of these algorithms, as shown in
  section 6, then you need to explain the various and different ways to use your
  tool specifically.

J: Given the audience of PEPM, erring on giving more seems better than selecting.
Otherwise it gives the impression that the applications are too narrow.

  The main points of section 5 are not clear to me. What are the advantages of
  introducing several representations of boolean variables and formulas? I guess
  you use them properly to optimize the evaluator, as described at the end of
  this section, but I cannot understand how to optimize it. How about
  illustrating concrete examples of and-list, and-maps, xor-list, and xor-maps?
  The methods of `FormulaRepr` does not also make sense to me. I think the last
  paragraph in this section explains the detail of the implementation too much,
  so how about omitting it and adding an example?

J: Will consider.

  I have a question about related work. I think partial evaluation in (classical)
  reversible computing is also studied. Can we consider the presented method as
  an extension of the existing work with Hadamard gates? If so, please cite the
  paper and make the differences clear.

J: Will do.

  In my understanding, all examples in section 6 assume that quantum oracles are
  implemented correctly. For example, the insight of Deutsch-Jozsa says that a
  given oracle must be balanced or constant. This assumption seems to be too
  strong when we try to use this work to for validation. Can we inspect the bug
  by extracting ANF equations easily? If possible, it might be better to give
  another example for use.

J: no clue.

  The Oqimp programming language proposed in the following paper has a feature
  for partial evaluation, so it may be related to your work. This comment can be
  ignored if it is not related to your work.

  > Li, Liyi, Finn Voichick, Kesha Hietala, Yuxiang Peng, Xiaodi Wu, and Michael Hicks. “Verified Compilation of Quantum Oracles.” ArXiv:2112.06700 [Quant-Ph], April 20, 2022. http://arxiv.org/abs/2112.06700.

J: will investigate.

### Minor comments

* L169: The sentence "any mixture of inputs and outputs can be made symbolic" does not make sense to me. Does it mean that if the number of input and output wires are the same, it can be made reversible, so symbolic partial evaluation such as retrodictive execution can be achieved?
* L374: How about saying that the unitary $U_f$ called oracle in this paragraph?
* Fig 5: A unitary $U_f$ is common in the given algorithms, but QFT is not. Probably this figure represents the case of the Shor. Moreover, you should note that QFT is an abbreviation of Quantum Fourier Transform.
* L573: Is it essential to separate data qubits and ancillae qubits in this analysis?
* L601: What is a "normalized" multiset?
* L631: What does mean `this` here?
* L637: How can we use the property of control wires to optimize the evaluation of single gates? Is this future work?
* Fig 12, 14: The axis labels are missing.
* All Figures: The fonts in the figures are too small.
* L1042. Why is it sufficient to inspect the case of A = |0...0>?
* L1047: there is a typo: registerr -> register
* L1093. What is the meaning of "those foundational ones related to the origin behind the power of quantum computation"?

===========================================================================

  What puzzles me is the section on evaluation, especially Section 6.1,
  because it's not clear what the authors would like to evaluate.  This
  section also raises a question about how the symbolic evaluator is
  supposed to be used.  The section seems to provide a few uses,
  including circuit optimization, but it is not very clear from the writing.

J: will try to clarify

  The title is "Symbolic Execution of Hadamard-Toffoli Quantum Circuits"
  but what is really symbolically executed is, as far as I understand, a
  part of a circuit in ANF, which consists only of generalized Toffoli
  gates and it is not really possible to mix Hadamard and Toffoli in an
  arbitrary way.  Since oracles can be written only with the generalized
  Toffoli gates, this restriction doesn't seem to cause problems (as far
  as examples in the paper are concerned) but the title may be slightly
  misleading.

J: Amr?

  Where "retrodictive" is mentioned, the paper [8] by the same set of
  authors is cited.  Self-citation is fine, but the cited paper (arXiv
  preprint) seems to share some materials with this submission, which I
  felt is a bit weird.

J: We'll clarify the relationship

  The circuits in Figure 5 use QFT but not all algorithms use it.  Also
  QFT is hardly mentioned until Section 6.

J: Indeed, should be careful about that.

  Section 5 is kind of isolated from the rest of the paper and it is not
  very clear (at least to me) what should be learned from this section.
  Perhaps, it is because the evaluation section doesn't really discuss
  how the evaluation took advantage of the careful design.

J: It's a paper about a piece of software...

  L716: How did you identify these balanced functions using the symbolic
  evaluator?  As far as I understand, if you know a given function is
  either a constant or balanced function, you will know which, but how
  do you enumerate such functions?  I think I missed something.

J: clarify.

===========================================================================

  This is a really well-written, interesting paper and I only have minor comments
  below. It's fascinating that leveraging a PL technique (symbolic evaluation)
  yields insight into which problems do not have efficient classical simulations.

J: We should add something about this to the introduction.

===========================================================================

  The graphs and explanations of the time measurements would benefit some
  extension. In particular, some discussion on how these figures relate to a
  simulation without symbolic evaluation would be beneficial for understanding
  the true impact of the proposed approach.

J: may be too hard.

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

These have all been addressed:
* line 245: Add comma before "which."
* line 249. Slightly clarify by changing to "Let's start symbolically evaluating the circuit on the left **of Fig. 4**".
* line 297: Eliminate ")." after the list of references.
* Paragraph around line 304. Three of the four possible ways to punctuate "i.e." are used: comma before, no commas, comma before and after. Choose one and stick with it; I am of the opinion that a comma is required both before and after, but that is my American English bias.
* line 466: Change "such that for $x : \mathbb{B}^n$, then $g(x, y)=...$" to, e.g., "such that for $x$ in $\mathbb{B}^n$ we have ..."
* line 514: Change "Unlike for value representation which can be computed from context, we want to explicitly choose formula representation (requirement 2) ourselves." to, e.g., "Unlike value representations that can be computed from context, we want to explicitly choose a formula representation (requirement 2) ourselves."
* line 547: Add a column break so the code is not split across a page.
* line 644. Reword, e.g., "It consists of 1449 lines of Haskell, of which 646 lines are blank, imports, comments, or module declarations, so that only 809 are “code.”"
* line 1047: Change "registerr" to "register"

- make sure code is open, accessible and linked in the paper.
(previous link was broken!! Now linked twice, for easy retrieval)

  However, this paper can be made more readable and attractive.  One of the
  weakest points is that this paper does not explain how to use it in the actual
  development of quantum algorithms. For example, what should we do next after
  obtaining ANF equations by retrodictive execution? It seems not to be easy to
  get feedback by just seeing these equations. If you show a workflow of the
  presented method in an earlier section, the strong points become more apparent.

J: I don't think there is a uniform workflow! It seems to depend on the actual 
questions one wants to ask. Added a short sub-section.

